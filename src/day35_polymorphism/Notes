Java Programming Day35

Topics: Polymorphism Intro

package name: day35_polymorphism

warmup tasks:
	1. Create an abstract class named Transportation
				Variables:
					make (final), model (final), color, year(final), price

				Encapsulate all the fields

				Add a constructor that can set all the fields

				abstract methods:
					transportPeople();
					start();

				non abstract methods:
					stop(): "Shut off the engine"
					toString()

	2. Create an interface named AutoPark

				abstract methods:
					autoPark()

	3. Create a sub interface of AutoPark named AutoPilot:

				abstract methods:
						autoPilot()

	4. Create an interface named Electric

				abstract methods:
					charge()


	5. Create an abstract sub class of Transportation named Car

				extra methods:
					drive()


	6. Create an abstract sub class of Transportation named Plane that implements Flyable

				non-abstract method:
					land()


	7. Create a sub class of car named Audi that implements AutoPark


	8. Create a sub class of Car named Tesla that implements AutoPark, AutoPilot and Electric




Abstract class vs interface: both are used for achieving abstraction
							 both can not be instantiated
							 both are meant to be inherited
							 both can not be final



						 abstract class: one class can extends one abstract class ONLY

						 				instance & statics both are supported

						 				constructor

						 				4 access modifiers are supported


						 interface: one class can implement multiple interfaces




extends vs implements:

		extends:
			class extends class
			interface extends interface(s)

		implements:
			class implements interface(s)

		extends & implements:
				extends first then implements